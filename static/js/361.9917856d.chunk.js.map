{"version":3,"file":"static/js/361.9917856d.chunk.js","mappings":"yPAEaA,E,QAAUC,GAAAA,IAAH,wB,SCoFpB,MA/EA,WACE,OAAuCC,EAAAA,EAAAA,UAAS,GAAhD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAgBC,EAAAA,EAAAA,cAAY,SAACC,GACjCH,EAAeG,KACd,IAEGC,GAAmBF,EAAAA,EAAAA,cAAY,SAACG,GACpC,OAAIA,IAASC,EAAAA,GAAAA,WAAiCC,EAAAA,EAAAA,cAC1CF,IAASC,EAAAA,GAAAA,QAA8BC,EAAAA,EAAAA,cACvCF,IAASC,EAAAA,GAAAA,IAA0BC,EAAAA,EAAAA,UACnCF,IAASC,EAAAA,GAAAA,QAA8BC,EAAAA,EAAAA,cACpCA,EAAAA,EAAAA,iBACN,IAEGC,GAAcN,EAAAA,EAAAA,cAAY,SAACG,GAC/B,OAAIA,IAASC,EAAAA,GAAAA,WAAiCG,EAAAA,GAAAA,MAAAA,WAC1CJ,IAASC,EAAAA,GAAAA,QAA8BG,EAAAA,GAAAA,MAAAA,QACvCJ,IAASC,EAAAA,GAAAA,IAA0BG,EAAAA,GAAAA,MAAAA,IACnCJ,IAASC,EAAAA,GAAAA,QAA8BG,EAAAA,GAAAA,MAAAA,QACpCA,EAAAA,GAAAA,MAAAA,WACN,IAMH,OAJAC,EAAAA,EAAAA,YAAU,WACRC,OAAOC,SAAS,EAAG,KAClB,KAGD,UAAC,EAAD,YACE,SAAC,KAAD,CAAQP,KAAMC,EAAAA,GAAAA,SACd,SAAC,KAAD,CAEED,KAAMC,EAAAA,GAAAA,WACNO,MAAM,iCACNC,UAAWf,IAAiBO,EAAAA,GAAAA,WAA2BP,EAAe,EACtEE,cAAeA,EACfQ,SAAUD,EAAYF,EAAAA,GAAAA,YACtBS,QAASX,EAAiBE,EAAAA,GAAAA,aANrBA,EAAAA,GAAAA,aAQP,SAAC,KAAD,CAEED,KAAMC,EAAAA,GAAAA,QACNO,MAAM,yBACNC,UAAWf,IAAiBO,EAAAA,GAAAA,QAAwBP,EAAe,EACnEE,cAAeA,EACfQ,SAAUD,EAAYF,EAAAA,GAAAA,SACtBS,QAASX,EAAiBE,EAAAA,GAAAA,UANrBA,EAAAA,GAAAA,UAQP,SAAC,KAAD,CAEED,KAAMC,EAAAA,GAAAA,SACNO,MAAM,4BACNC,UAAWf,IAAiBO,EAAAA,GAAAA,SAAyBP,EAAe,EACpEE,cAAeA,EACfQ,SAAUD,EAAYF,EAAAA,GAAAA,UACtBS,QAASX,EAAiBE,EAAAA,GAAAA,WANrBA,EAAAA,GAAAA,WAQP,SAAC,KAAD,CAEED,KAAMC,EAAAA,GAAAA,QACNO,MAAM,0BACNC,UAAWf,IAAiBO,EAAAA,GAAAA,QAAwBP,EAAe,EACnEE,cAAeA,EACfQ,SAAUD,EAAYF,EAAAA,GAAAA,SACtBS,QAASX,EAAiBE,EAAAA,GAAAA,UANrBA,EAAAA,GAAAA,UAQP,SAAC,KAAD,CAEED,KAAMC,EAAAA,GAAAA,IACNO,MAAM,wBACNC,UAAWf,IAAiBO,EAAAA,GAAAA,IAAoBP,EAAe,EAC/DE,cAAeA,EACfQ,SAAUD,EAAYF,EAAAA,GAAAA,KACtBS,QAASX,EAAiBE,EAAAA,GAAAA,MANrBA,EAAAA,GAAAA","sources":["pages/Movies/style.ts","pages/Movies/index.tsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n`;\r\n","import { useState, useCallback, useEffect } from 'react';\r\n\r\nimport { Banner, Slider } from '../../components';\r\nimport { queryKey, MovieCategory } from '../../constants';\r\nimport { api } from '../../apis';\r\nimport * as S from './style';\r\n\r\nfunction Movies() {\r\n  const [clicksSlider, setClickSlider] = useState(0);\r\n\r\n  const setSliderKind = useCallback((sliderNum: number) => {\r\n    setClickSlider(sliderNum);\r\n  }, []);\r\n\r\n  const getQueryFunction = useCallback((kind: number) => {\r\n    if (kind === MovieCategory.NowPlaying) return api.getNowPlayAll;\r\n    if (kind === MovieCategory.Popular) return api.getPopularAll;\r\n    if (kind === MovieCategory.Top) return api.getTopAll;\r\n    if (kind === MovieCategory.Ranking) return api.getPopularAll;\r\n    return api.getUpcomingAll;\r\n  }, []);\r\n\r\n  const getQueryKey = useCallback((kind: number) => {\r\n    if (kind === MovieCategory.NowPlaying) return queryKey.movie.nowPlaying;\r\n    if (kind === MovieCategory.Popular) return queryKey.movie.popular;\r\n    if (kind === MovieCategory.Top) return queryKey.movie.top;\r\n    if (kind === MovieCategory.Ranking) return queryKey.movie.popular;\r\n    return queryKey.movie.upcoming;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      <Banner kind={MovieCategory.Movie} />\r\n      <Slider\r\n        key={MovieCategory.NowPlaying}\r\n        kind={MovieCategory.NowPlaying}\r\n        title='Now Currently Showing Contents'\r\n        getSlider={clicksSlider === MovieCategory.NowPlaying ? clicksSlider : 0}\r\n        setSliderKind={setSliderKind}\r\n        queryKey={getQueryKey(MovieCategory.NowPlaying)}\r\n        queryFn={getQueryFunction(MovieCategory.NowPlaying)}\r\n      />\r\n      <Slider\r\n        key={MovieCategory.Ranking}\r\n        kind={MovieCategory.Ranking}\r\n        title='Top 10 Movies in Today'\r\n        getSlider={clicksSlider === MovieCategory.Ranking ? clicksSlider : 0}\r\n        setSliderKind={setSliderKind}\r\n        queryKey={getQueryKey(MovieCategory.Ranking)}\r\n        queryFn={getQueryFunction(MovieCategory.Ranking)}\r\n      />\r\n      <Slider\r\n        key={MovieCategory.Upcoming}\r\n        kind={MovieCategory.Upcoming}\r\n        title='Upcoming Release Contents'\r\n        getSlider={clicksSlider === MovieCategory.Upcoming ? clicksSlider : 0}\r\n        setSliderKind={setSliderKind}\r\n        queryKey={getQueryKey(MovieCategory.Upcoming)}\r\n        queryFn={getQueryFunction(MovieCategory.Upcoming)}\r\n      />\r\n      <Slider\r\n        key={MovieCategory.Popular}\r\n        kind={MovieCategory.Popular}\r\n        title='Rising Popular Contents'\r\n        getSlider={clicksSlider === MovieCategory.Popular ? clicksSlider : 0}\r\n        setSliderKind={setSliderKind}\r\n        queryKey={getQueryKey(MovieCategory.Popular)}\r\n        queryFn={getQueryFunction(MovieCategory.Popular)}\r\n      />\r\n      <Slider\r\n        key={MovieCategory.Top}\r\n        kind={MovieCategory.Top}\r\n        title='Highly Rated Contents'\r\n        getSlider={clicksSlider === MovieCategory.Top ? clicksSlider : 0}\r\n        setSliderKind={setSliderKind}\r\n        queryKey={getQueryKey(MovieCategory.Top)}\r\n        queryFn={getQueryFunction(MovieCategory.Top)}\r\n      />\r\n    </S.Wrapper>\r\n  );\r\n}\r\n\r\nexport default Movies;\r\n\r\n// [ AnimatePresence ]\r\n// 컴포넌트가 render되거나 destroy 될 때 효과를 줄 수 있다.\r\n\r\n// ( props )\r\n// 1. initial: boolean\r\n// 2. custom: any\r\n// 3. exitBeforeEnter: boolean\r\n// 4. onExitComplete: void\r\n\r\n// [ Gestures ]\r\n// variants로 인해 whileHover 같은 props는 자동적으로 자식 element에게 상속된다.\r\n// (단 해당 variants의 속성의 initial 이름이나 animate(GesturesEvent)의 이름은 부모의 variants안의 속성 이름과 같아야 한다.)\r\n"],"names":["Wrapper","styled","useState","clicksSlider","setClickSlider","setSliderKind","useCallback","sliderNum","getQueryFunction","kind","MovieCategory","api","getQueryKey","queryKey","useEffect","window","scrollTo","title","getSlider","queryFn"],"sourceRoot":""}