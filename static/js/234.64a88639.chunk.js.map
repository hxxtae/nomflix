{"version":3,"file":"static/js/234.64a88639.chunk.js","mappings":"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","sources":["pages/Search/style.ts","pages/Search/Search404/style.ts","pages/Search/Search404/index.tsx","pages/Search/SearchContent/style.ts","pages/Search/SearchContent/index.tsx","pages/Search/index.tsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nimport { HEADER_HEIGHT } from '../../global';\r\n\r\nexport const infoHoverVariants = (match: boolean) => ({\r\n  // Child Hover\r\n  hover: {\r\n    opacity: match ? 0 : 1,\r\n    transition: {\r\n      delay: 0.5,\r\n      duration: 0.3\r\n    }\r\n  },\r\n})\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  padding-top: ${HEADER_HEIGHT}px;\r\n  margin: 0px 4% 100px;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nimport { media } from '../../../utils';\r\n\r\nexport const Section = styled.section`\r\n  position: absolute;\r\n  inset: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.textColor};\r\n  background-color: ${({ theme }) => theme.bgColor};\r\n\r\n  ${media('mobile')} {\r\n    font-size: 10px;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  padding: 0 20px;\r\n  margin-bottom: 10%;\r\n`;\r\n\r\nexport const GuideContent = styled.p`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Content = styled.ul`\r\n  padding-left: 40px;\r\n  margin: 20px 0;\r\n  line-height: 1.2;\r\n  \r\n  li {\r\n    list-style: disc;\r\n  }\r\n`;\r\n","import * as S from './style';\r\n\r\ninterface ISearch404 {\r\n  searchText: string;\r\n}\r\n\r\nfunction Search404({ searchText }: ISearch404) {\r\n  return (\r\n    <S.Section>\r\n      <S.Wrapper>\r\n        <S.GuideContent>{`Your search for \"${searchText}\" did not have any matches.`}</S.GuideContent>\r\n        <S.GuideContent>{`Suggestions:`}</S.GuideContent>\r\n        <S.Content>\r\n          <li>Try different keywords</li>\r\n          <li>Looking for a movie or TV show?</li>\r\n          <li>Try using a movie, TV show title, an actor or director</li>\r\n          <li>Try a genre, like comedy, romance, sports, or drama</li>\r\n        </S.Content>\r\n      </S.Wrapper>\r\n    </S.Section>\r\n  )\r\n}\r\n\r\nexport default Search404;\r\n","import styled from 'styled-components';\r\nimport { media } from '../../../utils';\r\n\r\nexport const Title = styled.h2`\r\n  display: block;\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  \r\n  &:nth-of-type(1) {\r\n    padding-top: 50px;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  padding: 50px 0px;\r\n  display: grid;\r\n  gap: 4vw 0.4vw;\r\n  grid-template-columns: repeat(6, 1fr);\r\n\r\n  ${media('tablet')} {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n\r\n  ${media('mobile')} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`;","import { dto } from '../../../apis';\r\nimport { SkeletonList } from '../../../components';\r\nimport * as S from './style';\r\nimport SliderItem from '../../../components/Slider/SliderContent/SliderList/SliderItem';\r\n\r\ninterface ISearchContent {\r\n  title: string;\r\n  isLoading: boolean;\r\n  datas?: dto.IContentData[];\r\n  kind: number;\r\n  detailClick: (content: dto.IContentData) => void;\r\n}\r\n\r\nfunction SearchContent({ title, isLoading, datas, kind, detailClick }: ISearchContent) {\r\n  return (\r\n    <>\r\n      <S.Title>{ title }</S.Title>\r\n      <S.List>\r\n        {isLoading ?\r\n          <SkeletonList /> :\r\n          datas?.map((item, idx) => item.backdrop_path ?\r\n            <SliderItem\r\n              key={item.id + idx}\r\n              data={item}\r\n              kind={kind}\r\n              detailClick={detailClick} /> :\r\n            null)}\r\n      </S.List>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SearchContent;\r\n","import { useState, useCallback, useEffect } from 'react';\r\nimport { AnimatePresence } from 'framer-motion';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport { api, dto } from '../../apis';\r\nimport { useContentFetch } from '../../hooks';\r\nimport { MovieCategory, TvCategory, initContentData, queryKey } from '../../constants';\r\nimport { DetailView, PortalModal } from '../../components';\r\nimport * as S from './style';\r\nimport Search404 from './Search404';\r\nimport SearchContent from './SearchContent';\r\n\r\n\r\nfunction Search() {\r\n  const location = useLocation();\r\n  const keyword = new URLSearchParams(location.search).get(\"keyword\") || '';\r\n  const [chooseContent, setChooseContent] = useState<dto.IContentData>(initContentData);\r\n  const [chooseKind, setChooseKind] = useState<MovieCategory.Search | TvCategory.Search>(MovieCategory.Search);\r\n\r\n  // Movie Search Fetch\r\n  const queryKeyOfMovieSearch = queryKey.movie.search(keyword);\r\n  const queryFuncOfMovieSearch = () => api.getMovieSearchAll(keyword);\r\n  const { isLoading: isMovieLoading, datas: movieDatas } = useContentFetch(queryKeyOfMovieSearch, queryFuncOfMovieSearch);\r\n\r\n  // Tv Search Fetch\r\n  const queryKeyOfTvSearch = queryKey.tv.search(keyword);\r\n  const queryFuncOfTvSearch = () => api.getTvSearchAll(keyword);\r\n  const { isLoading: isTvLoading, datas: tvDatas } = useContentFetch(queryKeyOfTvSearch, queryFuncOfTvSearch);\r\n\r\n  const isLoading = isMovieLoading || isTvLoading;\r\n\r\n  const openMovieDetail = useCallback((content: dto.IContentData) => {\r\n    if (!content?.id) return;\r\n    setChooseKind(MovieCategory.Search);\r\n    setChooseContent((prev) => ({\r\n      ...prev,\r\n      ...content\r\n    }));\r\n  }, []);\r\n\r\n  const openTvDetail = useCallback((content: dto.IContentData) => {\r\n    if (!content?.id) return;\r\n    setChooseKind(TvCategory.Search);\r\n    setChooseContent((prev) => ({\r\n      ...prev,\r\n      ...content\r\n    }));\r\n  }, []);\r\n\r\n  const closeDetail = useCallback(() => {\r\n    setChooseContent((prev) => ({\r\n      ...prev,\r\n      ...initContentData\r\n    }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      <>\r\n        <S.Wrapper>\r\n          <SearchContent\r\n            title='MOVIE'\r\n            isLoading={isMovieLoading}\r\n            datas={movieDatas}\r\n            kind={MovieCategory.Search}\r\n            detailClick={openMovieDetail} />\r\n          <SearchContent\r\n            title='SERIES'\r\n            isLoading={isTvLoading}\r\n            datas={tvDatas}\r\n            kind={TvCategory.Search}\r\n            detailClick={openTvDetail} />          \r\n          {!isLoading && !movieDatas?.length && !tvDatas?.length &&\r\n            <Search404 searchText={keyword} />}\r\n        </S.Wrapper>\r\n        \r\n        {(!!chooseContent.id) && (\r\n          <PortalModal>\r\n            <DetailView data={chooseContent} kind={chooseKind} closeDetail={closeDetail} />\r\n          </PortalModal>\r\n        )}\r\n      </>\r\n    </AnimatePresence>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n"],"names":["Wrapper","styled","HEADER_HEIGHT","Section","theme","textColor","bgColor","media","GuideContent","Content","searchText","Title","List","title","isLoading","datas","kind","detailClick","map","item","idx","backdrop_path","SliderItem","data","id","location","useLocation","keyword","URLSearchParams","search","get","useState","initContentData","chooseContent","setChooseContent","MovieCategory","chooseKind","setChooseKind","queryKeyOfMovieSearch","queryKey","useContentFetch","api","isMovieLoading","movieDatas","queryKeyOfTvSearch","isTvLoading","tvDatas","openMovieDetail","useCallback","content","prev","openTvDetail","TvCategory","closeDetail","useEffect","window","scrollTo","AnimatePresence","length"],"sourceRoot":""}